## YamlMime:NoSQLQueryReference
type: command
name: count
description: |
  The `count` command is used to count the number of documents in a collection that match specific criteria.
summary: |
  This command is useful for obtaining quick statistics about the data stored in your collections, such as the number of documents that meet certain criteria.
syntax: |
  db.collection.count(
    <query>,
    <options>
  );
parameters:
  - name: query
    type: object
    required: true
    description: |
      A document specifying the selection criteria using query operators.
  - name: options
    type: object
    required: false
    description: |
      A document specifying options including, but not limited to `limit` and `skip`.
examples:
  items:
    - title: Counting all documents in a collection
      explanation: |        
        Use the `count` command with an empty document to count **all** documents in a collection. 
      description: |
        In this example, all documents in the `stores` collection are counted.
      query: |
        db.stores.count({ "_id": "ffffffff-5555-6666-7777-aaaaaaaaaaaa" })
      output:
        type: plaintext
        value: |
          1
    - title: Counting documents that match nested criteria
      explanation: |
        The `query` parameter supports nested parameters.
      description: |
        In this example, the command counts documents that match the string value `"Incredible Discount Days"` for the `promotionEvents.eventName` field.
      query: |
        db.stores.count({ "promotionEvents.eventName": "Incredible Discount Days" })
      output:
        type: plaintext
        value: |
          2156
    - title: Counting documents that match multiple criteria
      explanation: |
        The `query` parameter also supports multiple parameters.
      description: |
        In this example, the `locationLatitude` and `locationLongitude` parameters are used to count documents that match on these specific values.
      query: |
        db.stores.count({ "location.lat": -2.4111, "location.lon": 72.1041 })
      output:
        type: plaintext
        value: |
          2
related:
  - reference: /operators/query/regex