## YamlMime:NoSQLQueryReference
type: operator
name: regex
description: |
  The `$regex` operator is used to perform pattern matching with regular expressions.
summary: |
  This operator is useful for querying string fields for matches that fit specific patterns. Common use cases include searching for documents where a field contains a substring, starts with a certain prefix, or matches a complex pattern.
syntax: |
  { 
    "field": { 
      $regex: /pattern/, 
      $options: '<options>' 
    }
  }
parameters:
  - name: field
    type: string
    required: true
    description: |
      The field in the document to apply the regular expression to. This should be a string field that you want to match against the provided pattern.
  - name: $regex
    type: pattern
    required: true
    description: |
      The regular expression pattern to match.
  - name: $options
    type: string
    required: false
    description: |
      Flags to modify the behavior of the regex. Common options include, but are not limited to `i` for case-insensitive matching, `m` for multiline matching, etc.
examples:
  sample:
    set: stores
    filter: |
      {}
  items:
    - title: Find documents with a specific substring
      explanation: |
        Use the `$regex` operator to find all documents that match a specific pattern.
      description: |
        In this example, the operator filters to documents that contain the exact phrase `Home` in its name.
      query: |
        db.stores.find({ "name": { "$regex": /Home/ }}, { name: 1 })
      output:
        devlang: bson
        value: |
          [
            {
              _id: '00000000-0000-0000-0000-000000003001',
              name: 'Proseware, Inc. | Home Entertainment Hub - East Linwoodbury'
            },
            {
              _id: '00000000-0000-0000-0000-000000003002',
              name: 'Fabrikam, Inc. | Home Accessory Outlet - West Adele'
            }
          ]
    - title: Find documents using a case-insensitive match
      explanation: |
        The `$regex` operator includes options like case-insensitive search.
      description: |
        In this example, the operator filters to documents that contain the case-insensitive phrase `outlet` in its name.
      query: |
        db.stores.find({ "name": { $regex: /outlet/, $options: "i" }}, { name: 1 })
      output:
        devlang: bson
        value: |
          [
            {
              _id: '00000000-0000-0000-0000-000000003002',
              name: 'Fabrikam, Inc. | Home Accessory Outlet - West Adele'
            },
            {
              _id: '00000000-0000-0000-0000-000000003003',
              name: 'Wide World Importers | Fitness Equipment Outlet - Reillyborough'
            }
          ]
related:
  - reference: /commands/aggregation/count